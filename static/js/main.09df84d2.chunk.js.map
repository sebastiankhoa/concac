{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","response","json","users","this","filteredRobots","filter","robo","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCSCQ,EAdF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACtB,OAEI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,gCACI,6BAAKL,IACL,4BAAIC,WCeLK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACC,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAASM,EAAOG,GAAGT,OAHdS,SCGPC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEPI,G,MARA,SAACC,GACZ,OACJ,qBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,SAAjE,SACKJ,EAAMK,aCmDIC,E,kDA/CX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAO,CACRvB,OAAQ,GACRK,YAAa,IAJR,E,gEAQO,IAAD,OACfmB,MAAM,8CACDtC,MAAK,SAAAuC,GAAQ,OAAGA,EAASC,UACzBxC,MAAK,SAAAyC,GAAK,OAAG,EAAKP,SAAS,CAACpB,OAAO2B,S,+BAQlC,IAAD,EACwBC,KAAKL,MAA3BvB,EADF,EACEA,OAAQK,EADV,EACUA,YAETwB,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAKtC,KAAKuC,cAAcC,SAAS5B,EAAY2B,kBAGxD,OAAQhC,EAAOkC,OAIP,sBAAKtC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWU,aAAcsB,KAAKV,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUlB,OAAQ6B,SAPlC,6C,GA5BUM,aCDlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDxD,M","file":"static/js/main.09df84d2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n    return(\r\n        \r\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"Robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    \r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((user,i)=>{\r\n                return ( \r\n                 <Card\r\n                 key={i}\r\n                 id={robots[i].id}\r\n                 name={robots[i].name}\r\n                 email = {robots[i].email}\r\n                 /> \r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            type=\"search\"\r\n            placeholder=\"search Robots\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n<div style={{overflow:'scroll', border:'3px solid black', height:'800px'}}>\r\n    {props.children}\r\n</div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state= {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users=> this.setState({robots:users}));\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n       this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield}= this.state;\r\n\r\n        const filteredRobots = robots.filter(robo =>{\r\n            return robo.name.toLowerCase().includes(searchfield.toLowerCase());      \r\n        })\r\n\r\n        return !robots.length ?\r\n        <h1>Loading</h1> :\r\n        (\r\n            \r\n                <div className='tc'>\r\n                    <h1 className='f1'>RobotFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n                \r\n        ); \r\n        \r\n      \r\n        \r\n    }\r\n     \r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}